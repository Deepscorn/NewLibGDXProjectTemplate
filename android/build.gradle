apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.gamelift.koten"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions {
        cruncherEnabled false
        useNewCruncher false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
//    These lines is just to compile core project code using java 8 too. Otherwise we have an error:
//    Error:Error converting bytecode to dex:
//    Cause: Dex cannot parse version 52 byte code.
//    This is caused by library dependencies that have been compiled using Java 8 or above.
//    If you are using the 'java' gradle plugin in a library submodule add
//    targetCompatibility = '1.7'
//    sourceCompatibility = '1.7'
//    to that submodule's build.gradle file.
    sourceSets {
        main.java.srcDirs += '../core/src/main/java'
    }
}

retrolambda {
    jdk System.getenv("JAVA_HOME")
    jvmArgs '-noverify'
    incremental false
}

configurations { natives }

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:multidex:1.0.1'

    compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
    compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
    compile "com.badlogicgames.ashley:ashley:$ashleyVersion"
    compile "com.badlogicgames.gdx:gdx-ai:$aiVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    compile "com.badlogicgames.gdx:gdx-bullet:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-x86"
}

// extract .so from downloaded by gradle latest natives and copies them to src/main/jniLibs/
// call every time on version change. Just uncomment - task will be executed automatically next time gradle is running
task unpackNatives() {
    def outputRoot = "src/main/jniLibs/";
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file(outputRoot + "arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file(outputRoot + "armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file(outputRoot + "armeabi")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file(outputRoot + "x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file(outputRoot + "x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}